# This is an autogenerated file for dynamic methods in Ramen
# Please rerun bundle exec rake rails_rbi:models[Ramen] to regenerate.

# typed: strong
module Ramen::ActiveRelation_WhereNot
  sig { params(opts: T.untyped, rest: T.untyped).returns(T.self_type) }
  def not(opts, *rest); end
end

module Ramen::GeneratedAttributeMethods
  sig { returns(T.nilable(String)) }
  def brand; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def brand=(value); end

  sig { returns(T::Boolean) }
  def brand?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def created_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def created_at=(value); end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(Integer) }
  def id; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(T.nilable(String)) }
  def review; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def review=(value); end

  sig { returns(T::Boolean) }
  def review?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def updated_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def updated_at=(value); end

  sig { returns(T::Boolean) }
  def updated_at?; end
end

module Ramen::CustomFinderMethods
  sig { params(limit: Integer).returns(T::Array[Ramen]) }
  def first_n(limit); end

  sig { params(limit: Integer).returns(T::Array[Ramen]) }
  def last_n(limit); end

  sig { params(args: T::Array[T.any(Integer, String)]).returns(T::Array[Ramen]) }
  def find_n(*args); end

  sig { params(id: Integer).returns(T.nilable(Ramen)) }
  def find_by_id(id); end

  sig { params(id: Integer).returns(Ramen) }
  def find_by_id!(id); end
end

class Ramen < ApplicationRecord
  include Ramen::GeneratedAttributeMethods
  extend Ramen::CustomFinderMethods
  extend Ramen::QueryMethodsReturningRelation
  RelationType = T.type_alias { T.any(Ramen::ActiveRecord_Relation, Ramen::ActiveRecord_Associations_CollectionProxy, Ramen::ActiveRecord_AssociationRelation) }
end

module Ramen::QueryMethodsReturningRelation
  sig { returns(Ramen::ActiveRecord_Relation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Ramen::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_Relation) }
  def select(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_Relation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_Relation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_Relation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_Relation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_Relation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_Relation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_Relation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_Relation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_Relation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_Relation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_Relation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_Relation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_Relation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_Relation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_Relation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_Relation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_Relation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_Relation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_Relation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_Relation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_Relation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_Relation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_Relation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_Relation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_Relation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_Relation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_Relation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_Relation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_Relation) }
  def only(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Ramen::ActiveRecord_Relation) }
  def extending(*args, &block); end
end

module Ramen::QueryMethodsReturningAssociationRelation
  sig { returns(Ramen::ActiveRecord_AssociationRelation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Ramen::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_AssociationRelation) }
  def select(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_AssociationRelation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_AssociationRelation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_AssociationRelation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_AssociationRelation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_AssociationRelation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_AssociationRelation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_AssociationRelation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_AssociationRelation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_AssociationRelation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_AssociationRelation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_AssociationRelation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_AssociationRelation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_AssociationRelation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_AssociationRelation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_AssociationRelation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_AssociationRelation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_AssociationRelation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_AssociationRelation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_AssociationRelation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_AssociationRelation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_AssociationRelation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_AssociationRelation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_AssociationRelation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_AssociationRelation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_AssociationRelation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_AssociationRelation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_AssociationRelation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_AssociationRelation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(Ramen::ActiveRecord_AssociationRelation) }
  def only(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Ramen::ActiveRecord_AssociationRelation) }
  def extending(*args, &block); end
end

class Ramen::ActiveRecord_Relation < ActiveRecord::Relation
  include Ramen::ActiveRelation_WhereNot
  include Ramen::CustomFinderMethods
  include Ramen::QueryMethodsReturningRelation
  Elem = type_member(fixed: Ramen)
end

class Ramen::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  include Ramen::ActiveRelation_WhereNot
  include Ramen::CustomFinderMethods
  include Ramen::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: Ramen)
end

class Ramen::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Ramen::CustomFinderMethods
  include Ramen::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: Ramen)

  sig { params(records: T.any(Ramen, T::Array[Ramen])).returns(T.self_type) }
  def <<(*records); end

  sig { params(records: T.any(Ramen, T::Array[Ramen])).returns(T.self_type) }
  def append(*records); end

  sig { params(records: T.any(Ramen, T::Array[Ramen])).returns(T.self_type) }
  def push(*records); end

  sig { params(records: T.any(Ramen, T::Array[Ramen])).returns(T.self_type) }
  def concat(*records); end
end
